// Code generated by hertz generator.

package favorite

import (
	"context"
	"fmt"
	"simple_tiktok/biz/dal"
	"simple_tiktok/biz/model/favorite"
	"simple_tiktok/biz/redis"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

// LikeAction .
// @router /douyin/favorite/action/ [POST]
func LikeAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.LikeRequest
	err = c.BindAndValidate(&req)
	fmt.Println(req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(favorite.LikeResponse)
	user_name, exists := c.Get("user_name")
	if !exists {
		resp.StatusCode = 1
		fmt.Println("解析Token失败，没有Token解析的信息")
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	users, err := dal.FindUserByName(user_name.(string))
	if err != nil {
		resp.StatusCode = 1
		fmt.Println("数据库查询失败")
		c.JSON(consts.StatusBadRequest, resp)
	}

	likeInfo, err := redis.GetLikeInfo(req.VideoID, string(users[0].ID))
	if err != nil {
		resp.StatusCode = 1
		fmt.Println("Redis查询是否点赞信息出错")
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	if likeInfo == nil {
		err := redis.IncrLikeCount(req.VideoID)
		if err != nil {
			resp.StatusCode = 1
			fmt.Println("赞操作失败")
			c.JSON(consts.StatusBadRequest, resp)
			return
		}
	} else {
		err := redis.DecrLikeCount(req.VideoID)
		if err != nil {
			resp.StatusCode = 1
			fmt.Println("取消赞操作失败")
			c.JSON(consts.StatusBadRequest, resp)
			return
		}
	}

	resp.StatusCode = 0
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetLikeList .
// @router /douyin/favorite/list/ [GET]
func GetLikeList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req favorite.LikeListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(favorite.LikeListResponse)

	c.JSON(consts.StatusOK, resp)
}
