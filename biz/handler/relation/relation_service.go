// Code generated by hertz generator.

package relation

import (
	"context"
	"simple_tiktok/biz/dal"
	"simple_tiktok/biz/model/user"
	"simple_tiktok/biz/redis"
	"strconv"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	relation "simple_tiktok/biz/model/relation"
)

// FollowAction .
// @router /douyin/relation/action/ [POST]
func FollowAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.FollowResponse)

	userName, exist := c.Get("user_name")
	if !exist {
		resp.StatusCode = 1
		resp.StatusMsg = "解析Token失败，没有Token解析的信息"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	users, _ := dal.FindUserByName(userName.(string))
	err = redis.FollowUser(strconv.Itoa(int(users[0].ID)), req.ToUserID)
	if err != nil {
		resp.StatusCode = 1
		resp.StatusMsg = "点赞失败"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	resp.StatusCode = 0
	resp.StatusMsg = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetFollowList .
// @router /douyin/relation/follow/list/ [GET]
func GetFollowList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowingListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.FollowingListResponse)
	message := ""
	resp.StatusMsg = &message
	_, exist := c.Get("user_name")
	if !exist {
		resp.StatusCode = 1
		message = "解析Token失败，没有Token解析的信息"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	Followings, err := redis.GetFollowing(strconv.FormatInt(req.UserID, 10))
	if err != nil {
		resp.StatusCode = 1
		message = "查询关注的人失败"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	var users []*user.UserInfo

	for _, userID := range Followings {
		to, _ := dal.FindUserByID(userID)
		f := &user.UserInfo{
			ID:            userID,
			Name:          to[0].UserName,
			FollowCount:   0,
			FollowerCount: 0,
			IsFollow:      false,
		}
		users = append(users, f)
	}

	//fmt.Println(users)

	resp.UserList = users
	resp.StatusCode = 0
	message = "success"
	c.JSON(consts.StatusOK, resp)
}

// GetFollowerList .
// @router /douyin/relation/follower/list/ [GET]
func GetFollowerList(ctx context.Context, c *app.RequestContext) {
	var err error
	var req relation.FollowerListRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(relation.FollowerListResponse)

	message := ""
	resp.StatusMsg = &message
	_, exist := c.Get("user_name")
	if !exist {
		resp.StatusCode = 1
		message = "解析Token失败，没有Token解析的信息"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}

	Followings, err := redis.GetFollowers(strconv.FormatInt(req.UserID, 10))
	if err != nil {
		resp.StatusCode = 1
		message = "查询粉丝失败"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	var users []*user.UserInfo

	for _, userID := range Followings {
		to, _ := dal.FindUserByID(userID)
		f := &user.UserInfo{
			ID:            userID,
			Name:          to[0].UserName,
			FollowCount:   0,
			FollowerCount: 0,
			IsFollow:      false,
		}
		users = append(users, f)
	}

	resp.UserList = users
	resp.StatusCode = 0
	message = "success"
	c.JSON(consts.StatusOK, resp)
}
