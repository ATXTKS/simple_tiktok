// Code generated by hertz generator.

package base

import (
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/common/utils"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"golang.org/x/crypto/bcrypt"
	"net/http"
	"simple_tiktok/biz/dal"
	"simple_tiktok/biz/model/douyin/base"
	"simple_tiktok/pojo"
	"simple_tiktok/util"
)

// UserRegister .
// @router /douyin/user/register/ [POST]
func UserRegister(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.UserRegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	//数据库查一查，有没有这个人
	users, err := dal.FindUserByName(req.Username)
	if err != nil {
		c.JSON(http.StatusOK, utils.H{
			"message": err.Error(),
			"code":    http.StatusBadRequest,
		})
		return
	}
	if len(users) > 0 {
		c.JSON(http.StatusOK, utils.H{
			"message": "user already exists",
			"code":    http.StatusBadRequest,
		})
		return
	}

	resp := new(base.UserRegisterResp)

	// 密码加密
	EncodePassword, err := bcrypt.GenerateFromPassword([]byte(req.Password), bcrypt.DefaultCost)
	if err != nil {
		resp.StatusCode = 1
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	fmt.Println(EncodePassword)

	// 创建实例
	user := pojo.User{
		UserName:      req.Username,
		Password:      string(EncodePassword),
		FollowCount:   0,
		FollowerCount: 0,
	}

	// 执行数据库事务
	if err := dal.CreateUsers(&user); err != nil {
		resp.StatusCode = 1
		c.JSON(consts.StatusInternalServerError, resp)
		return
	}
	resp.UserID = int64(user.ID)

	//颁发token
	resp.Token, err = util.GetToken(req.Username)
	if err != nil {
		resp.StatusCode = 1
		c.JSON(consts.StatusBadRequest, resp)
	}
	c.JSON(consts.StatusOK, resp)
}

// UserLogin .
// @router /douyin/user/login/ [POST]
func UserLogin(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.UserLoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	resp := new(base.UserLoginResp)
	var message = ""
	resp.StatusMsg = &message

	//数据库查一查，有没有这个人
	users, err := dal.FindUserByName(req.Username)
	if err != nil {
		resp.StatusCode = 1
		message = "请求错误"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	if len(users) == 0 {
		resp.StatusCode = 1
		message = "没有此用户"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	// 密码认证
	if err := bcrypt.CompareHashAndPassword([]byte(users[0].Password), []byte(req.Password)); err != nil {
		resp.StatusCode = 1
		message = "用户名或密码错误"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.Token, err = util.GetToken(req.Username)
	if err != nil {
		resp.StatusCode = 1
		message = "颁发token失败"
		c.JSON(consts.StatusBadRequest, resp)
	}
	resp.StatusCode = 0
	message = "登录成功"
	resp.UserID = int64(users[0].ID)
	c.JSON(consts.StatusOK, resp)
}

// UserInfo .
// @router /douyin/user/ [GET]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req base.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(base.UserInfoResp)
	var message = ""
	resp.StatusMsg = &message

	//数据库查一查，有没有这个人
	users, err := dal.FindUserByID(req.UserID)
	if err != nil {
		resp.StatusCode = 1
		message = "请求错误"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	if len(users) == 0 {
		resp.StatusCode = 1
		message = "没有此用户"
		c.JSON(consts.StatusBadRequest, resp)
		return
	}
	resp.StatusCode = 0
	message = "请求成功"
	user := &base.User{
		ID:            int64(users[0].ID),
		Name:          users[0].UserName,
		FollowCount:   &users[0].FollowCount,
		FollowerCount: &users[0].FollowerCount,
		IsFollow:      false,
	}
	resp.User = user
	c.JSON(consts.StatusOK, resp)
}
