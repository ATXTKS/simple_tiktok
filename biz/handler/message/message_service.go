// Code generated by hertz generator.

package message

import (
	"context"
	"net/http"
	"simple_tiktok/biz/dal"
	"simple_tiktok/pojo"
	"sort"
	"time"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"simple_tiktok/biz/model/message"
)

// MessageChat .
// @router /douyin/message/chat/ [GET]
func MessageChat(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.MessageChatReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(message.MessageChatResp)

	mes := ""
	resp.StatusMsg = &mes

	userName, exists := c.Get("user_name")
	if !exists {
		resp.StatusCode = 1
		mes = "未解析到token"
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	users, err := dal.FindUserByName(userName.(string))
	if err != nil {
		resp.StatusCode = 1
		mes = "查询用户失败"
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	sendMessages, err := dal.QuerryMessageByID(int64(users[0].ID), req.ToUserID, req.PreMsgTime)
	if err != nil {
		resp.StatusCode = 1
		mes = "查询消息失败"
		c.JSON(http.StatusBadRequest, resp)
		return
	}
	reciveMessage, err := dal.QuerryMessageByID(req.ToUserID, int64(users[0].ID), req.PreMsgTime)
	if err != nil {
		resp.StatusCode = 1
		mes = "查询消息失败"
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	MessageList := make([]*message.Message, len(sendMessages)+len(reciveMessage))
	for i := 0; i < len(sendMessages); i++ {
		var msg message.Message
		msg.ID = int64(sendMessages[i].ID)
		msg.ToUserID = sendMessages[i].ToUserID
		msg.FromUserID = sendMessages[i].UserID
		msg.Content = sendMessages[i].Content
		msg.CreateTime = &sendMessages[i].PublishDate
		MessageList[i] = &msg
	}
	for i := len(sendMessages); i < len(sendMessages)+len(reciveMessage); i++ {
		var msg message.Message
		msg.ID = int64(reciveMessage[i-len(sendMessages)].ID)
		msg.ToUserID = reciveMessage[i-len(sendMessages)].ToUserID
		msg.FromUserID = reciveMessage[i-len(sendMessages)].UserID
		msg.Content = reciveMessage[i-len(sendMessages)].Content
		msg.CreateTime = &reciveMessage[i-len(sendMessages)].PublishDate
		MessageList[i] = &msg
	}

	sort.Slice(MessageList, func(i, j int) bool {
		return *MessageList[i].CreateTime < *MessageList[j].CreateTime
	})

	resp.StatusCode = 0
	mes = "success"
	resp.MessageList = MessageList
	c.JSON(consts.StatusOK, resp)
}

// MessageAction .
// @router /douyin/message/action/ [POST]
func MessageAction(ctx context.Context, c *app.RequestContext) {
	var err error
	var req message.MessageActionReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(message.MessageActionResp)
	mes := ""
	resp.StatusMsg = &mes

	userName, exists := c.Get("user_name")
	if !exists {
		resp.StatusCode = 1
		mes = "未解析到token"
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	users, err := dal.FindUserByName(userName.(string))
	if err != nil {
		resp.StatusCode = 1
		mes = "查询用户失败"
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	newMessage := &pojo.Message{
		UserID:      int64(users[0].ID),
		ToUserID:    req.ToUserID,
		Content:     req.Content,
		PublishDate: time.Now().Unix(),
	}
	err = dal.CreateMessage(newMessage)
	if err != nil {
		resp.StatusCode = 1
		mes = "创建消息失败"
		c.JSON(http.StatusBadRequest, resp)
		return
	}

	resp.StatusCode = 0
	mes = "success"
	c.JSON(consts.StatusOK, resp)
}
