// Code generated by Kitex v0.4.4. DO NOT EDIT.

package interactservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	interact "simple_tiktok/kitex_gen/interact"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactServiceServiceInfo
}

var interactServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractService"
	handlerType := (*interact.InteractService)(nil)
	methods := map[string]kitex.MethodInfo{
		"LikeAction":     kitex.NewMethodInfo(likeActionHandler, newInteractServiceLikeActionArgs, newInteractServiceLikeActionResult, false),
		"GetLikeList":    kitex.NewMethodInfo(getLikeListHandler, newInteractServiceGetLikeListArgs, newInteractServiceGetLikeListResult, false),
		"CommentAction":  kitex.NewMethodInfo(commentActionHandler, newInteractServiceCommentActionArgs, newInteractServiceCommentActionResult, false),
		"GetCommentList": kitex.NewMethodInfo(getCommentListHandler, newInteractServiceGetCommentListArgs, newInteractServiceGetCommentListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interact",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func likeActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceLikeActionArgs)
	realResult := result.(*interact.InteractServiceLikeActionResult)
	success, err := handler.(interact.InteractService).LikeAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceLikeActionArgs() interface{} {
	return interact.NewInteractServiceLikeActionArgs()
}

func newInteractServiceLikeActionResult() interface{} {
	return interact.NewInteractServiceLikeActionResult()
}

func getLikeListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceGetLikeListArgs)
	realResult := result.(*interact.InteractServiceGetLikeListResult)
	success, err := handler.(interact.InteractService).GetLikeList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceGetLikeListArgs() interface{} {
	return interact.NewInteractServiceGetLikeListArgs()
}

func newInteractServiceGetLikeListResult() interface{} {
	return interact.NewInteractServiceGetLikeListResult()
}

func commentActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceCommentActionArgs)
	realResult := result.(*interact.InteractServiceCommentActionResult)
	success, err := handler.(interact.InteractService).CommentAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceCommentActionArgs() interface{} {
	return interact.NewInteractServiceCommentActionArgs()
}

func newInteractServiceCommentActionResult() interface{} {
	return interact.NewInteractServiceCommentActionResult()
}

func getCommentListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interact.InteractServiceGetCommentListArgs)
	realResult := result.(*interact.InteractServiceGetCommentListResult)
	success, err := handler.(interact.InteractService).GetCommentList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractServiceGetCommentListArgs() interface{} {
	return interact.NewInteractServiceGetCommentListArgs()
}

func newInteractServiceGetCommentListResult() interface{} {
	return interact.NewInteractServiceGetCommentListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) LikeAction(ctx context.Context, request *interact.LikeRequest) (r *interact.LikeResponse, err error) {
	var _args interact.InteractServiceLikeActionArgs
	_args.Request = request
	var _result interact.InteractServiceLikeActionResult
	if err = p.c.Call(ctx, "LikeAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetLikeList(ctx context.Context, request *interact.LikeListRequest) (r *interact.LikeListResponse, err error) {
	var _args interact.InteractServiceGetLikeListArgs
	_args.Request = request
	var _result interact.InteractServiceGetLikeListResult
	if err = p.c.Call(ctx, "GetLikeList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CommentAction(ctx context.Context, request *interact.CommentRequest) (r *interact.CommentResponse, err error) {
	var _args interact.InteractServiceCommentActionArgs
	_args.Request = request
	var _result interact.InteractServiceCommentActionResult
	if err = p.c.Call(ctx, "CommentAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetCommentList(ctx context.Context, request *interact.CommentListRequest) (r *interact.CommentListResponse, err error) {
	var _args interact.InteractServiceGetCommentListArgs
	_args.Request = request
	var _result interact.InteractServiceGetCommentListResult
	if err = p.c.Call(ctx, "GetCommentList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
