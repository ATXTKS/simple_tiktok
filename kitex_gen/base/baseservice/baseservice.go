// Code generated by Kitex v0.4.4. DO NOT EDIT.

package baseservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	base "simple_tiktok/kitex_gen/base"
)

func serviceInfo() *kitex.ServiceInfo {
	return baseServiceServiceInfo
}

var baseServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "BaseService"
	handlerType := (*base.BaseService)(nil)
	methods := map[string]kitex.MethodInfo{
		"UserRegister":   kitex.NewMethodInfo(userRegisterHandler, newBaseServiceUserRegisterArgs, newBaseServiceUserRegisterResult, false),
		"UserLogin":      kitex.NewMethodInfo(userLoginHandler, newBaseServiceUserLoginArgs, newBaseServiceUserLoginResult, false),
		"GetUserInfo":    kitex.NewMethodInfo(getUserInfoHandler, newBaseServiceGetUserInfoArgs, newBaseServiceGetUserInfoResult, false),
		"GetVideoList":   kitex.NewMethodInfo(getVideoListHandler, newBaseServiceGetVideoListArgs, newBaseServiceGetVideoListResult, false),
		"PublishAction":  kitex.NewMethodInfo(publishActionHandler, newBaseServicePublishActionArgs, newBaseServicePublishActionResult, false),
		"GetPublishList": kitex.NewMethodInfo(getPublishListHandler, newBaseServiceGetPublishListArgs, newBaseServiceGetPublishListResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "base",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.4.4",
		Extra:           extra,
	}
	return svcInfo
}

func userRegisterHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceUserRegisterArgs)
	realResult := result.(*base.BaseServiceUserRegisterResult)
	success, err := handler.(base.BaseService).UserRegister(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceUserRegisterArgs() interface{} {
	return base.NewBaseServiceUserRegisterArgs()
}

func newBaseServiceUserRegisterResult() interface{} {
	return base.NewBaseServiceUserRegisterResult()
}

func userLoginHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceUserLoginArgs)
	realResult := result.(*base.BaseServiceUserLoginResult)
	success, err := handler.(base.BaseService).UserLogin(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceUserLoginArgs() interface{} {
	return base.NewBaseServiceUserLoginArgs()
}

func newBaseServiceUserLoginResult() interface{} {
	return base.NewBaseServiceUserLoginResult()
}

func getUserInfoHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceGetUserInfoArgs)
	realResult := result.(*base.BaseServiceGetUserInfoResult)
	success, err := handler.(base.BaseService).GetUserInfo(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGetUserInfoArgs() interface{} {
	return base.NewBaseServiceGetUserInfoArgs()
}

func newBaseServiceGetUserInfoResult() interface{} {
	return base.NewBaseServiceGetUserInfoResult()
}

func getVideoListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceGetVideoListArgs)
	realResult := result.(*base.BaseServiceGetVideoListResult)
	success, err := handler.(base.BaseService).GetVideoList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGetVideoListArgs() interface{} {
	return base.NewBaseServiceGetVideoListArgs()
}

func newBaseServiceGetVideoListResult() interface{} {
	return base.NewBaseServiceGetVideoListResult()
}

func publishActionHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServicePublishActionArgs)
	realResult := result.(*base.BaseServicePublishActionResult)
	success, err := handler.(base.BaseService).PublishAction(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServicePublishActionArgs() interface{} {
	return base.NewBaseServicePublishActionArgs()
}

func newBaseServicePublishActionResult() interface{} {
	return base.NewBaseServicePublishActionResult()
}

func getPublishListHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*base.BaseServiceGetPublishListArgs)
	realResult := result.(*base.BaseServiceGetPublishListResult)
	success, err := handler.(base.BaseService).GetPublishList(ctx, realArg.Request)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBaseServiceGetPublishListArgs() interface{} {
	return base.NewBaseServiceGetPublishListArgs()
}

func newBaseServiceGetPublishListResult() interface{} {
	return base.NewBaseServiceGetPublishListResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) UserRegister(ctx context.Context, request *base.RegisterRequest) (r *base.RegisterResponse, err error) {
	var _args base.BaseServiceUserRegisterArgs
	_args.Request = request
	var _result base.BaseServiceUserRegisterResult
	if err = p.c.Call(ctx, "UserRegister", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) UserLogin(ctx context.Context, request *base.LoginRequest) (r *base.LoginResponse, err error) {
	var _args base.BaseServiceUserLoginArgs
	_args.Request = request
	var _result base.BaseServiceUserLoginResult
	if err = p.c.Call(ctx, "UserLogin", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetUserInfo(ctx context.Context, request *base.UserInfoRequest) (r *base.UserInfoResponse, err error) {
	var _args base.BaseServiceGetUserInfoArgs
	_args.Request = request
	var _result base.BaseServiceGetUserInfoResult
	if err = p.c.Call(ctx, "GetUserInfo", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetVideoList(ctx context.Context, request *base.FeedRequest) (r *base.FeedResponse, err error) {
	var _args base.BaseServiceGetVideoListArgs
	_args.Request = request
	var _result base.BaseServiceGetVideoListResult
	if err = p.c.Call(ctx, "GetVideoList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) PublishAction(ctx context.Context, request *base.PublishRequest) (r *base.PublishResponse, err error) {
	var _args base.BaseServicePublishActionArgs
	_args.Request = request
	var _result base.BaseServicePublishActionResult
	if err = p.c.Call(ctx, "PublishAction", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetPublishList(ctx context.Context, request *base.PublishListRequest) (r *base.PublishListResponse, err error) {
	var _args base.BaseServiceGetPublishListArgs
	_args.Request = request
	var _result base.BaseServiceGetPublishListResult
	if err = p.c.Call(ctx, "GetPublishList", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
